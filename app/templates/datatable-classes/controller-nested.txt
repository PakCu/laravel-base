<?php

class $NAME$ extends \BaseController {

	/**
	 * Display a listing of $COLLECTION$
	 *
	 * @return Response
	 */
	public function index($parent_id)
	{
		if(!$MODEL2$::canList())
		{
			return $this->_access_denied();
		}
		if(Request::ajax())
		{
			$$COLLECTION$ = $MODEL2$::where('$NESTINGCOL$', $parent_id);
			$$COLLECTION$ = $$COLLECTION$->select([
				'$TABLE_NAME$.id',
				$CONTROLLER_COLUMNS$'$TABLE_NAME$.id as actions'
            ]);
			return Datatables::of($$COLLECTION$)
                ->edit_column('actions', function($$RESOURCE$) use ($parent_id) {
                    $actions   = [];
                    $actions[] = $$RESOURCE$->canShow() ? link_to_action('$CONTROLLER$@show', 'Show', [$parent_id, $$RESOURCE$->id], ['class' => 'btn btn-xs btn-primary'] ) : '';
                    $actions[] = $$RESOURCE$->canUpdate() ? link_to_action('$CONTROLLER$@edit', 'Update', [$parent_id, $$RESOURCE$->id], ['class' => 'btn btn-xs btn-default'] ) : '';
                    $actions[] = $$RESOURCE$->canDelete() ? Former::open(action('$CONTROLLER$@destroy', [$parent_id, $$RESOURCE$->id]))->class('form-inline') 
                    . Former::hidden('_method', 'DELETE')
                    . '<button type="button" class="btn btn-xs btn-danger confirm-delete">Delete</button>'
                    . Former::close() : '';
                    return implode(' ', $actions);
                })
                ->remove_column('id')
                ->make();
        }
        $parent = $NESTINGMODEL$::findOrFail($parent_id);
        Asset::push('js', 'datatables');
        return View::make('$COLLECTION$.index', compact('parent_id', 'parent'));
    }

	/**
	 * Show the form for creating a new $RESOURCE$
	 *
	 * @return Response
	 */
	public function create($parent_id)
	{
		if(Request::ajax())
		{
			return $this->_ajax_denied();
		}
		if(!$MODEL2$::canCreate())
		{
			return $this->_access_denied();
		}
        $parent = $NESTINGMODEL$::findOrFail($parent_id);
		return View::make('$COLLECTION$.create', compact('parent_id', 'parent'));
	}

	/**
	 * Store a newly created $RESOURCE$ in storage.
	 *
	 * @return Response
	 */
	public function store($parent_id)
	{
		$data = Input::all();
		$MODEL2$::setRules('store');
		if(!$MODEL2$::canCreate())
		{
			return $this->_access_denied();
		}
		$$RESOURCE$ = new $MODEL2$;
		$$RESOURCE$->$NESTINGCOL$ = $parent_id;
		$$RESOURCE$->fill($data);
		if(!$$RESOURCE$->save())
		{
			return $this->_validation_error($$RESOURCE$);
		}
		if(Request::ajax())
		{
			return Response::json($$RESOURCE$, 201);
		}
		return Redirect::action('$CONTROLLER$@index', $parent_id)
         ->with('notification:success', $this->created_message);
     }

	/**
	 * Display the specified $RESOURCE$.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($parent_id, $id)
	{
		$$RESOURCE$ = $MODEL2$::findOrFail($id);
		if(!$$RESOURCE$->canShow())
		{
			return $this->_access_denied();
		}
		if(Request::ajax())
		{
			return Response::json($$RESOURCE$);
		}
        $parent = $NESTINGMODEL$::findOrFail($parent_id);
		Asset::push('js', 'show');
		return View::make('$COLLECTION$.show', compact('$RESOURCE$', 'parent_id', 'parent'));
	}

	/**
	 * Show the form for editing the specified $RESOURCE$.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($parent_id, $id)
	{
		$$RESOURCE$ = $MODEL2$::findOrFail($id);
		if(Request::ajax())
		{
			return $this->_ajax_denied();
		}
		if(!$$RESOURCE$->canUpdate())
		{
			return $this->_access_denied();
		}
        $parent = $NESTINGMODEL$::findOrFail($parent_id);
		return View::make('$COLLECTION$.edit', compact('$RESOURCE$', 'parent_id', 'parent'));
	}

	/**
	 * Update the specified $RESOURCE$ in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($parent_id, $id)
	{
		$$RESOURCE$ = $MODEL2$::findOrFail($id);
		$MODEL2$::setRules('update');
		$data = Input::all();
		if(!$$RESOURCE$->canUpdate())
		{
			return $this->_access_denied();
		}
		if(!$$RESOURCE$->update($data)) {
			return $this->_validation_error($$RESOURCE$);
		}
		if(Request::ajax())
		{
			return $$RESOURCE$;
		}
		Session::remove('_old_input');
		return Redirect::action('$CONTROLLER$@edit', [$parent_id, $id])
            ->with('notification:success', $this->updated_message);
    }

	/**
	 * Remove the specified $RESOURCE$ from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($parent_id, $id)
	{
		$$RESOURCE$ = $MODEL2$::findOrFail($id);
		if(!$$RESOURCE$->canDelete())
		{
			return $this->_access_denied();
		}
		$$RESOURCE$->delete();
		if(Request::ajax())
		{
			return Response::json($this->deleted_message);
		}
		return Redirect::action('$CONTROLLER$@index', $parent_id)
            ->with('notification:success', $this->deleted_message);
    }

	/**
	 * Constructor
	 */

	public function __construct()
	{
		parent::__construct();
		View::share('controller', '$MODEL$');
	}

}
