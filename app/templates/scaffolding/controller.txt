<?php

class $NAME$ extends \BaseController {

	protected $validation_error_message = 'Validation Error.';
	protected $access_denied_message = 'Access denied.';
	protected $created_message = 'Record created.';
	protected $create_error_message = 'Error creating record.';
	protected $updated_message = 'Record updated.';
	protected $update_error_message = 'Error updating record.';
	protected $deleted_message = 'Record deleted.';
	protected $delete_error_message = 'Error deleting record.';

	/**
	 * Display a listing of $COLLECTION$
	 *
	 * @return Response
	 */
	public function index()
	{
		
		if(!$MODEL$::canList())
		{
			if(Request::ajax())
			{
				return Response::json($this->access_denied_message, 403);
			}
			return Redirect::back()
				->with('notification:danger', $this->access_denied_message);
		}
		
		if(Request::ajax())
		{
			$users_under_me = Auth::user()->get_authorized_userids($MODEL$::$show_authorize_flag);
			if(empty($users_under_me)) {
				$$COLLECTION$ = $MODEL$::whereNotNull('$COLLECTION$.created_at');	
			} else {
				$$COLLECTION$ = $MODEL$::whereIn('$COLLECTION$.user_id', $users_under_me);	
			}
			$$COLLECTION$ = $$COLLECTION$->select(['$COLLECTION$.id', '$COLLECTION$.name']);
			return Datatables::of($$COLLECTION$)
        ->add_column('actions', '{{View::make("$COLLECTION$.actions-row", compact("id"))->render()}}')
				->remove_column('id')
				->make();
			return Datatables::of($$COLLECTION$)->make();
		}
		return View::make('$COLLECTION$.index');
	}

	/**
	 * Show the form for creating a new $RESOURCE$
	 *
	 * @return Response
	 */
	public function create()
	{
		if(Request::ajax())
		{
			return Response::json("Bad request", 400);
		}

		if(!$MODEL$::canCreate())
		{
			return Redirect::back()
				->with('notification:danger', $this->access_denied_message);
		}
		return View::make('$COLLECTION$.create');
	}

	/**
	 * Store a newly created $RESOURCE$ in storage.
	 *
	 * @return Response
	 */
	public function store()
	{
		$validator = Validator::make($data = Input::all(), $MODEL$::$rules['store']);
		
		if(!$MODEL$::canCreate())
		{
			if(Request::ajax())
			{
				return Response::json($this->access_denied_message, 403);
			}
			return Redirect::back()
				->with('notification:danger', $this->access_denied_message);
		}

		if ($validator->fails())
		{
			if(Request::ajax())
			{
				return Response::json($validator->messages(), 400);
			}
			return Redirect::back()
				->withErrors($validator)
				->withInput()
				->with('notification:danger', $this->validation_error_message);
		}

		Event::fire('$MODEL$.before.create', [$data]);

		$$RESOURCE$ = $MODEL$::create($data);

		if(!isset($$RESOURCE$->id))
		{
			if(Request::ajax())
			{
				return Response::json($this->create_error_message, 201);
			}
			return Redirect::back()
				->with('notification:danger', $this->create_error_message);
		}

		Event::fire('$MODEL$.after.create', [$$RESOURCE$]);

		if(Request::ajax())
		{
			return Response::json($$RESOURCE$->toJson(), 201);
		}
		return Redirect::route('$COLLECTION$.index')
			->with('notification:success', $this->created_message);
	}

	/**
	 * Display the specified $RESOURCE$.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
		$$RESOURCE$ = $MODEL$::findOrFail($id);
		
		if(!$$RESOURCE$->canShow())
		{
			if(Request::ajax())
			{
				return Response::json($this->access_denied_message, 403);
			}
			return Redirect::back()->with('notification:danger', $this->access_denied_message);
		}

		if(Request::ajax())
		{
			return Response::json($$RESOURCE$->toJson(), 201);
		}
		return View::make('$COLLECTION$.show', compact('$RESOURCE$'));
	}

	/**
	 * Show the form for editing the specified $RESOURCE$.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
		$$RESOURCE$ = $MODEL$::find($id);

		if(Request::ajax())
		{
			return Response::json("Bad request", 400);
		}
		
		if(!$$RESOURCE$->canUpdate())
		{
			return Redirect::back()->with('notification:danger', $this->access_denied_message);
		}

		return View::make('$COLLECTION$.edit', compact('$RESOURCE$'));
	}

	/**
	 * Update the specified $RESOURCE$ in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($id)
	{
		$$RESOURCE$ = $MODEL$::findOrFail($id);
		$data = Input::all();
		
		if(!$$RESOURCE$->canUpdate())
		{
			if(Request::ajax())
			{
				return Response::json($this->access_denied_message, 403);
			}
			return Redirect::back()
				->with('notification:danger', $this->access_denied_message);
		}

		if(!isset($data['_bypass'])) {
			$validator = Validator::make($data, $MODEL$::$rules['update']);

			if ($validator->fails())
			{
				if(Request::ajax())
				{
					return Response::json($validator->messages(), 400);
				}
				return Redirect::back()
					->withErrors($validator)
					->withInput()
					->with('notification:danger', $this->validation_error_message);
			}
		} else {
			$MODEL$::$rules['update'] = [];
		}

		Event::fire('$MODEL$.before.update', [$$RESOURCE$]);

		if(!$$RESOURCE$->update($data)){
			if(Request::ajax())
			{
				return Response::json($this->update_error_message, 500);
			}
			return Redirect::back()
				->withErrors($validator)
				->withInput()
				->with('notification:danger', $this->update_error_message);
		}

		Event::fire('$MODEL$.after.update', [$$RESOURCE$]);

		if(Request::ajax())
		{
			return $$RESOURCE$;
		}
		return Redirect::back()
			->with('notification:success', $this->updated_message);
	}

	/**
	 * Remove the specified $RESOURCE$ from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
		$$RESOURCE$ = $MODEL$::findOrFail($id);
		
		if(!$$RESOURCE$->canDelete())
		{
			if(Request::ajax())
			{
				return Response::json($this->access_denied_message, 403);
			}
			return Redirect::back()->with('notification:danger', $this->access_denied_message);
		}

		Event::fire('$MODEL$.before.delete', [$$RESOURCE$]);

		if(!$$RESOURCE$->delete()){
			if(Request::ajax())
			{
				return Response::json($this->delete_error_message, 500);
			}
			return Redirect::back()
				->withErrors($validator)
				->withInput()
				->with('notification:danger', $this->delete_error_message);
		}

		Event::fire('$MODEL$.after.update', [$$RESOURCE$]);

		if(Request::ajax())
		{
			return Response::json($this->deleted_message);
		}

		return Redirect::route('$COLLECTION$.index')
			->with('notification:success', $this->deleted_message);
	}

	public function __construct()
	{
		parent::__construct();
		View::share('controller', '$MODEL$');
	}

}
